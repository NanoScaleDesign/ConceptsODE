%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Saturday, May 1, 2010 4:37:20 PM PDT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
1.00000 0 0 RG
46.0000 -1.00000 338.987 390.000 rc
newpath
47.0000 190.436 m
47.9154 190.298 l
48.8308 189.894 l
49.7463 189.238 l
50.6617 188.345 l
52.4926 185.903 l
54.3235 182.675 l
57.5096 175.481 l
60.6957 166.705 l
67.8619 143.442 l
75.0756 118.566 l
82.2550 95.7872 l
88.9112 78.6958 l
92.3573 71.8963 l
95.8034 66.7025 l
97.5854 64.6859 l
99.3673 63.1424 l
101.149 62.0820 l
102.931 61.5126 l
104.707 61.4391 l
106.483 61.8624 l
108.260 62.7838 l
110.036 64.2026 l
113.690 68.6722 l
117.344 75.1860 l
123.781 91.3740 l
131.028 116.059 l
138.305 146.483 l
145.317 179.664 l
148.501 195.546 l
151.685 211.717 l
155.471 231.098 l
159.257 250.389 l
162.464 266.457 l
165.671 282.104 l
173.133 316.007 l
179.738 341.927 l
186.984 364.571 l
190.434 372.880 l
193.884 379.449 l
197.484 384.361 l
201.084 387.221 l
202.737 387.833 l
204.390 388.000 l
206.043 387.719 l
207.696 386.992 l
211.261 383.904 l
214.827 378.765 l
218.531 371.305 l
222.235 361.765 l
228.683 340.519 l
235.648 311.719 l
239.245 294.832 l
242.843 276.816 l
246.362 258.292 l
249.881 239.078 l
253.287 220.025 l
256.692 200.712 l
260.473 179.199 l
264.254 157.874 l
267.651 139.090 l
271.048 120.861 l
278.303 84.6316 l
284.877 56.0963 l
292.064 30.8836 l
298.826 13.8528 l
302.361 7.77890 l
305.895 3.73809 l
307.623 2.51669 l
309.350 1.79492 l
311.078 1.57467 l
312.806 1.85635 l
314.615 2.68808 l
316.423 4.06646 l
318.232 5.98739 l
320.041 8.44519 l
323.525 14.6644 l
327.009 22.7800 l
334.135 44.8939 l
341.202 73.2944 l
344.449 88.1659 l
347.696 103.995 l
351.417 123.126 l
355.139 143.085 l
358.467 161.439 l
361.795 180.081 l
365.344 200.067 l
368.893 219.948 l
372.290 238.675 l
375.686 256.910 l
382.987 293.581 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
q
0 0 1.00000 RG
46.0000 -1.00000 338.987 390.000 rc
newpath
47.0000 190.436 m
50.6617 169.831 l
54.3235 149.470 l
57.5096 132.141 l
60.6957 115.336 l
67.8619 80.2242 l
75.0756 49.9270 l
82.2550 26.1782 l
88.9112 10.8165 l
92.3573 5.59686 l
95.8034 2.31988 l
97.5854 1.39956 l
99.3673 1.01086 l
101.149 1.15487 l
102.931 1.83120 l
106.483 4.75885 l
110.036 9.76034 l
113.690 17.0097 l
117.344 26.3085 l
123.781 47.3257 l
131.028 77.2063 l
134.666 94.2835 l
138.305 112.487 l
141.811 130.896 l
145.317 149.952 l
148.501 167.645 l
151.685 185.542 l
155.471 206.867 l
159.257 227.984 l
162.464 245.511 l
165.671 262.536 l
173.133 299.351 l
179.738 327.527 l
186.984 352.330 l
193.884 368.990 l
197.484 374.734 l
201.084 378.365 l
202.737 379.312 l
204.390 379.802 l
206.043 379.833 l
207.696 379.406 l
211.261 376.931 l
214.827 372.357 l
218.531 365.440 l
222.235 356.398 l
228.683 335.927 l
235.648 307.844 l
239.245 291.283 l
242.843 273.568 l
246.362 255.314 l
249.881 236.349 l
253.287 217.518 l
256.692 198.409 l
260.473 177.105 l
264.254 155.969 l
267.651 137.341 l
271.048 119.256 l
278.303 83.2965 l
284.877 54.9673 l
292.064 29.9444 l
298.826 13.0637 l
302.361 7.05859 l
305.895 3.08075 l
307.623 1.88809 l
309.350 1.19390 l
311.078 1.00000 l
312.806 1.30691 l
314.615 2.16391 l
316.423 3.56640 l
318.232 5.51037 l
320.041 7.99014 l
323.525 14.2490 l
327.009 22.4007 l
334.135 44.5794 l
341.202 73.0332 l
344.449 87.9262 l
347.696 103.775 l
351.417 122.926 l
355.139 142.904 l
358.467 161.274 l
361.795 179.929 l
365.344 199.929 l
368.893 219.823 l
372.290 238.560 l
375.686 256.806 l
382.987 293.495 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
349.388 190.436 m
349.388 193.036 l
S
newpath
282.190 190.436 m
282.190 193.036 l
S
newpath
214.993 190.436 m
214.993 193.036 l
S
newpath
147.796 190.436 m
147.796 193.036 l
S
newpath
80.5987 190.436 m
80.5987 193.036 l
S
newpath
47.0000 190.436 m
382.987 190.436 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
208 213 12 15 rc
newpath
215.375 217.687 m
214.875 219.406 l
215.875 219.406 l
215.765 219.812 l
214.781 219.812 l
213.687 223.546 l
213.572 223.953 213.515 224.213 213.515 224.328  c
213.515 224.401 213.531 224.458 213.562 224.500  c
213.593 224.541 213.635 224.562 213.687 224.562  c
213.791 224.562 213.927 224.484 214.093 224.328  c
214.197 224.244 214.427 223.984 214.781 223.546  c
214.984 223.718 l
214.599 224.281 214.234 224.677 213.890 224.906  c
213.651 225.072 213.411 225.156 213.171 225.156  c
212.984 225.156 212.830 225.096 212.710 224.976  c
212.591 224.856 212.531 224.708 212.531 224.531  c
212.531 224.302 212.599 223.953 212.734 223.484  c
213.796 219.812 l
212.843 219.812 l
212.906 219.562 l
213.364 219.437 213.750 219.247 214.062 218.992  c
214.375 218.737 214.718 218.302 215.093 217.687  c
215.375 217.687 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
47.0000 190.436 m
47.0000 195.636 l
S
Q
q
newpath
114.197 190.436 m
114.197 195.636 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
121.953 212.343 m
121.359 214.000 l
116.281 214.000 l
116.281 213.765 l
117.770 212.401 118.820 211.286 119.429 210.421  c
120.039 209.557 120.343 208.770 120.343 208.062  c
120.343 207.510 120.177 207.059 119.843 206.710  c
119.510 206.362 119.109 206.187 118.640 206.187  c
118.224 206.187 117.846 206.309 117.507 206.554  c
117.169 206.799 116.921 207.161 116.765 207.640  c
116.531 207.640 l
116.635 206.859 116.906 206.260 117.343 205.843  c
117.781 205.427 118.328 205.218 118.984 205.218  c
119.682 205.218 120.265 205.442 120.734 205.890  c
121.203 206.338 121.437 206.864 121.437 207.468  c
121.437 207.906 121.333 208.343 121.125 208.781  c
120.812 209.468 120.307 210.192 119.609 210.953  c
118.557 212.109 117.895 212.807 117.625 213.046  c
119.875 213.046 l
120.333 213.046 120.653 213.028 120.835 212.992  c
121.018 212.955 121.184 212.885 121.335 212.781  c
121.487 212.677 121.614 212.531 121.718 212.343  c
121.953 212.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
181.394 190.436 m
181.394 195.636 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
189.046 210.828 m
189.046 211.734 l
187.890 211.734 l
187.890 214.000 l
186.843 214.000 l
186.843 211.734 l
183.203 211.734 l
183.203 210.921 l
187.203 205.218 l
187.890 205.218 l
187.890 210.828 l
189.046 210.828 l
h
186.843 210.828 m
186.843 206.546 l
183.828 210.828 l
186.843 210.828 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
248.592 190.436 m
248.592 195.636 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
255.828 205.218 m
255.828 205.453 l
255.265 205.505 254.807 205.614 254.453 205.781  c
254.099 205.947 253.750 206.203 253.406 206.546  c
253.062 206.890 252.778 207.273 252.554 207.695  c
252.330 208.117 252.140 208.614 251.984 209.187  c
252.599 208.770 253.213 208.562 253.828 208.562  c
254.411 208.562 254.919 208.799 255.351 209.273  c
255.783 209.747 256.000 210.359 256.000 211.109  c
256.000 211.828 255.781 212.484 255.343 213.078  c
254.822 213.796 254.130 214.156 253.265 214.156  c
252.671 214.156 252.171 213.958 251.765 213.562  c
250.963 212.812 250.562 211.833 250.562 210.625  c
250.562 209.854 250.716 209.122 251.023 208.429  c
251.330 207.737 251.770 207.119 252.343 206.578  c
252.916 206.036 253.466 205.674 253.992 205.492  c
254.518 205.309 255.005 205.218 255.453 205.218  c
255.828 205.218 l
h
251.875 209.656 m
251.802 210.229 251.765 210.692 251.765 211.046  c
251.765 211.453 251.841 211.893 251.992 212.367  c
252.143 212.841 252.364 213.218 252.656 213.500  c
252.875 213.697 253.140 213.796 253.453 213.796  c
253.817 213.796 254.145 213.622 254.437 213.273  c
254.729 212.924 254.875 212.432 254.875 211.796  c
254.875 211.067 254.729 210.440 254.437 209.914  c
254.145 209.388 253.739 209.125 253.218 209.125  c
253.052 209.125 252.877 209.158 252.695 209.226  c
252.513 209.294 252.239 209.437 251.875 209.656  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
315.789 190.436 m
315.789 195.636 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
319.500 209.671 m
318.812 209.109 318.369 208.658 318.171 208.320  c
317.974 207.981 317.875 207.630 317.875 207.265  c
317.875 206.703 318.091 206.221 318.523 205.820  c
318.955 205.419 319.531 205.218 320.250 205.218  c
320.947 205.218 321.507 205.406 321.929 205.781  c
322.351 206.156 322.562 206.583 322.562 207.062  c
322.562 207.385 322.447 207.713 322.218 208.046  c
321.989 208.380 321.515 208.776 320.796 209.234  c
321.536 209.807 322.026 210.260 322.265 210.593  c
322.588 211.020 322.750 211.474 322.750 211.953  c
322.750 212.557 322.520 213.075 322.062 213.507  c
321.604 213.940 321.000 214.156 320.250 214.156  c
319.427 214.156 318.786 213.901 318.328 213.390  c
317.963 212.974 317.781 212.520 317.781 212.031  c
317.781 211.656 317.911 211.281 318.171 210.906  c
318.432 210.531 318.875 210.119 319.500 209.671  c
h
320.484 208.984 m
320.994 208.526 321.317 208.164 321.453 207.898  c
321.588 207.632 321.656 207.333 321.656 207.000  c
321.656 206.562 321.531 206.216 321.281 205.960  c
321.031 205.705 320.692 205.578 320.265 205.578  c
319.828 205.578 319.474 205.703 319.203 205.953  c
318.932 206.203 318.796 206.494 318.796 206.828  c
318.796 207.046 318.854 207.268 318.968 207.492  c
319.083 207.716 319.244 207.927 319.453 208.125  c
320.484 208.984 l
h
319.796 209.906 m
319.442 210.197 319.182 210.518 319.015 210.867  c
318.849 211.216 318.765 211.593 318.765 212.000  c
318.765 212.552 318.914 212.992 319.210 213.320  c
319.507 213.648 319.885 213.812 320.343 213.812  c
320.802 213.812 321.169 213.682 321.445 213.421  c
321.721 213.161 321.859 212.849 321.859 212.484  c
321.859 212.182 321.776 211.906 321.609 211.656  c
321.317 211.208 320.713 210.625 319.796 209.906  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
382.987 190.436 m
382.987 195.636 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
382.531 206.234 m
384.625 205.218 l
384.828 205.218 l
384.828 212.484 l
384.828 212.963 384.849 213.263 384.890 213.382  c
384.932 213.502 385.015 213.593 385.140 213.656  c
385.265 213.718 385.520 213.755 385.906 213.765  c
385.906 214.000 l
382.671 214.000 l
382.671 213.765 l
383.078 213.755 383.341 213.718 383.460 213.656  c
383.580 213.593 383.664 213.510 383.710 213.406  c
383.757 213.302 383.781 212.994 383.781 212.484  c
383.781 207.843 l
383.781 207.208 383.760 206.802 383.718 206.625  c
383.687 206.489 383.632 206.390 383.554 206.328  c
383.476 206.265 383.380 206.234 383.265 206.234  c
383.109 206.234 382.895 206.302 382.625 206.437  c
382.531 206.234 l
h
387.968 209.750 m
387.968 208.770 388.117 207.924 388.414 207.210  c
388.710 206.497 389.104 205.968 389.593 205.625  c
389.979 205.354 390.375 205.218 390.781 205.218  c
391.437 205.218 392.026 205.552 392.546 206.218  c
393.203 207.052 393.531 208.182 393.531 209.609  c
393.531 210.609 393.388 211.458 393.101 212.156  c
392.815 212.854 392.447 213.362 392.000 213.679  c
391.552 213.997 391.125 214.156 390.718 214.156  c
389.895 214.156 389.208 213.671 388.656 212.703  c
388.197 211.880 387.968 210.895 387.968 209.750  c
h
389.218 209.906 m
389.218 211.093 389.364 212.062 389.656 212.812  c
389.895 213.437 390.255 213.750 390.734 213.750  c
390.963 213.750 391.200 213.648 391.445 213.445  c
391.690 213.242 391.875 212.895 392.000 212.406  c
392.197 211.687 392.296 210.661 392.296 209.328  c
392.296 208.349 392.192 207.531 391.984 206.875  c
391.838 206.385 391.640 206.041 391.390 205.843  c
391.224 205.708 391.015 205.640 390.765 205.640  c
390.484 205.640 390.229 205.765 390.000 206.015  c
389.697 206.369 389.492 206.924 389.382 207.679  c
389.273 208.434 389.218 209.177 389.218 209.906  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
47.0000 76.7726 m
44.4000 76.7726 l
S
newpath
47.0000 152.548 m
44.4000 152.548 l
S
newpath
47.0000 228.324 m
44.4000 228.324 l
S
newpath
47.0000 304.100 m
44.4000 304.100 l
S
newpath
47.0000 379.876 m
44.4000 379.876 l
S
newpath
47.0000 388.000 m
47.0000 1.00000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 88 8 15 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
47.0000 341.988 m
41.8000 341.988 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
19 340 7 13 rc
newpath
29.7968 347.437 m
21.2031 347.437 l
21.2031 346.765 l
29.7968 346.765 l
29.7968 347.437 l
h
f
Q
newpath
28.4687 346.750 m
28.4687 345.770 28.6171 344.924 28.9140 344.210  c
29.2109 343.497 29.6041 342.968 30.0937 342.625  c
30.4791 342.354 30.8750 342.218 31.2812 342.218  c
31.9375 342.218 32.5260 342.552 33.0468 343.218  c
33.7031 344.052 34.0312 345.182 34.0312 346.609  c
34.0312 347.609 33.8880 348.458 33.6015 349.156  c
33.3151 349.854 32.9479 350.362 32.5000 350.679  c
32.0520 350.997 31.6250 351.156 31.2187 351.156  c
30.3958 351.156 29.7083 350.671 29.1562 349.703  c
28.6979 348.880 28.4687 347.895 28.4687 346.750  c
h
29.7187 346.906 m
29.7187 348.093 29.8645 349.062 30.1562 349.812  c
30.3958 350.437 30.7552 350.750 31.2343 350.750  c
31.4635 350.750 31.7005 350.648 31.9453 350.445  c
32.1901 350.242 32.3750 349.895 32.5000 349.406  c
32.6979 348.687 32.7968 347.661 32.7968 346.328  c
32.7968 345.349 32.6927 344.531 32.4843 343.875  c
32.3385 343.385 32.1406 343.041 31.8906 342.843  c
31.7239 342.708 31.5156 342.640 31.2656 342.640  c
30.9843 342.640 30.7291 342.765 30.5000 343.015  c
30.1979 343.369 29.9921 343.924 29.8828 344.679  c
29.7734 345.434 29.7187 346.177 29.7187 346.906  c
h
36.1250 349.765 m
36.3229 349.765 36.4895 349.835 36.6250 349.976  c
36.7604 350.117 36.8281 350.281 36.8281 350.468  c
36.8281 350.666 36.7604 350.833 36.6250 350.968  c
36.4895 351.104 36.3229 351.171 36.1250 351.171  c
35.9270 351.171 35.7604 351.104 35.6250 350.968  c
35.4895 350.833 35.4218 350.666 35.4218 350.468  c
35.4218 350.270 35.4895 350.104 35.6250 349.968  c
35.7604 349.833 35.9270 349.765 36.1250 349.765  c
h
43.7968 347.828 m
43.7968 348.734 l
42.6406 348.734 l
42.6406 351.000 l
41.5937 351.000 l
41.5937 348.734 l
37.9531 348.734 l
37.9531 347.921 l
41.9531 342.218 l
42.6406 342.218 l
42.6406 347.828 l
43.7968 347.828 l
h
41.5937 347.828 m
41.5937 343.546 l
38.5781 347.828 l
41.5937 347.828 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
47.0000 266.212 m
41.8000 266.212 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
19 265 7 13 rc
newpath
29.7968 272.437 m
21.2031 272.437 l
21.2031 271.765 l
29.7968 271.765 l
29.7968 272.437 l
h
f
Q
newpath
28.4687 271.750 m
28.4687 270.770 28.6171 269.924 28.9140 269.210  c
29.2109 268.497 29.6041 267.968 30.0937 267.625  c
30.4791 267.354 30.8750 267.218 31.2812 267.218  c
31.9375 267.218 32.5260 267.552 33.0468 268.218  c
33.7031 269.052 34.0312 270.182 34.0312 271.609  c
34.0312 272.609 33.8880 273.458 33.6015 274.156  c
33.3151 274.854 32.9479 275.362 32.5000 275.679  c
32.0520 275.997 31.6250 276.156 31.2187 276.156  c
30.3958 276.156 29.7083 275.671 29.1562 274.703  c
28.6979 273.880 28.4687 272.895 28.4687 271.750  c
h
29.7187 271.906 m
29.7187 273.093 29.8645 274.062 30.1562 274.812  c
30.3958 275.437 30.7552 275.750 31.2343 275.750  c
31.4635 275.750 31.7005 275.648 31.9453 275.445  c
32.1901 275.242 32.3750 274.895 32.5000 274.406  c
32.6979 273.687 32.7968 272.661 32.7968 271.328  c
32.7968 270.349 32.6927 269.531 32.4843 268.875  c
32.3385 268.385 32.1406 268.041 31.8906 267.843  c
31.7239 267.708 31.5156 267.640 31.2656 267.640  c
30.9843 267.640 30.7291 267.765 30.5000 268.015  c
30.1979 268.369 29.9921 268.924 29.8828 269.679  c
29.7734 270.434 29.7187 271.177 29.7187 271.906  c
h
36.1250 274.765 m
36.3229 274.765 36.4895 274.835 36.6250 274.976  c
36.7604 275.117 36.8281 275.281 36.8281 275.468  c
36.8281 275.666 36.7604 275.833 36.6250 275.968  c
36.4895 276.104 36.3229 276.171 36.1250 276.171  c
35.9270 276.171 35.7604 276.104 35.6250 275.968  c
35.4895 275.833 35.4218 275.666 35.4218 275.468  c
35.4218 275.270 35.4895 275.104 35.6250 274.968  c
35.7604 274.833 35.9270 274.765 36.1250 274.765  c
h
43.7031 274.343 m
43.1093 276.000 l
38.0312 276.000 l
38.0312 275.765 l
39.5208 274.401 40.5703 273.286 41.1796 272.421  c
41.7890 271.557 42.0937 270.770 42.0937 270.062  c
42.0937 269.510 41.9270 269.059 41.5937 268.710  c
41.2604 268.362 40.8593 268.187 40.3906 268.187  c
39.9739 268.187 39.5963 268.309 39.2578 268.554  c
38.9192 268.799 38.6718 269.161 38.5156 269.640  c
38.2812 269.640 l
38.3854 268.859 38.6562 268.260 39.0937 267.843  c
39.5312 267.427 40.0781 267.218 40.7343 267.218  c
41.4322 267.218 42.0156 267.442 42.4843 267.890  c
42.9531 268.338 43.1875 268.864 43.1875 269.468  c
43.1875 269.906 43.0833 270.343 42.8750 270.781  c
42.5625 271.468 42.0572 272.192 41.3593 272.953  c
40.3072 274.109 39.6458 274.807 39.3750 275.046  c
41.6250 275.046 l
42.0833 275.046 42.4036 275.028 42.5859 274.992  c
42.7682 274.955 42.9349 274.885 43.0859 274.781  c
43.2369 274.677 43.3645 274.531 43.4687 274.343  c
43.7031 274.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
47.0000 190.436 m
41.8000 190.436 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
37.4687 195.750 m
37.4687 194.770 37.6171 193.924 37.9140 193.210  c
38.2109 192.497 38.6041 191.968 39.0937 191.625  c
39.4791 191.354 39.8750 191.218 40.2812 191.218  c
40.9375 191.218 41.5260 191.552 42.0468 192.218  c
42.7031 193.052 43.0312 194.182 43.0312 195.609  c
43.0312 196.609 42.8880 197.458 42.6015 198.156  c
42.3151 198.854 41.9479 199.362 41.5000 199.679  c
41.0520 199.997 40.6250 200.156 40.2187 200.156  c
39.3958 200.156 38.7083 199.671 38.1562 198.703  c
37.6979 197.880 37.4687 196.895 37.4687 195.750  c
h
38.7187 195.906 m
38.7187 197.093 38.8645 198.062 39.1562 198.812  c
39.3958 199.437 39.7552 199.750 40.2343 199.750  c
40.4635 199.750 40.7005 199.648 40.9453 199.445  c
41.1901 199.242 41.3750 198.895 41.5000 198.406  c
41.6979 197.687 41.7968 196.661 41.7968 195.328  c
41.7968 194.349 41.6927 193.531 41.4843 192.875  c
41.3385 192.385 41.1406 192.041 40.8906 191.843  c
40.7239 191.708 40.5156 191.640 40.2656 191.640  c
39.9843 191.640 39.7291 191.765 39.5000 192.015  c
39.1979 192.369 38.9921 192.924 38.8828 193.679  c
38.7734 194.434 38.7187 195.177 38.7187 195.906  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
47.0000 114.660 m
41.8000 114.660 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
28.4687 119.750 m
28.4687 118.770 28.6171 117.924 28.9140 117.210  c
29.2109 116.497 29.6041 115.968 30.0937 115.625  c
30.4791 115.354 30.8750 115.218 31.2812 115.218  c
31.9375 115.218 32.5260 115.552 33.0468 116.218  c
33.7031 117.052 34.0312 118.182 34.0312 119.609  c
34.0312 120.609 33.8880 121.458 33.6015 122.156  c
33.3151 122.854 32.9479 123.362 32.5000 123.679  c
32.0520 123.997 31.6250 124.156 31.2187 124.156  c
30.3958 124.156 29.7083 123.671 29.1562 122.703  c
28.6979 121.880 28.4687 120.895 28.4687 119.750  c
h
29.7187 119.906 m
29.7187 121.093 29.8645 122.062 30.1562 122.812  c
30.3958 123.437 30.7552 123.750 31.2343 123.750  c
31.4635 123.750 31.7005 123.648 31.9453 123.445  c
32.1901 123.242 32.3750 122.895 32.5000 122.406  c
32.6979 121.687 32.7968 120.661 32.7968 119.328  c
32.7968 118.349 32.6927 117.531 32.4843 116.875  c
32.3385 116.385 32.1406 116.041 31.8906 115.843  c
31.7239 115.708 31.5156 115.640 31.2656 115.640  c
30.9843 115.640 30.7291 115.765 30.5000 116.015  c
30.1979 116.369 29.9921 116.924 29.8828 117.679  c
29.7734 118.434 29.7187 119.177 29.7187 119.906  c
h
36.1250 122.765 m
36.3229 122.765 36.4895 122.835 36.6250 122.976  c
36.7604 123.117 36.8281 123.281 36.8281 123.468  c
36.8281 123.666 36.7604 123.833 36.6250 123.968  c
36.4895 124.104 36.3229 124.171 36.1250 124.171  c
35.9270 124.171 35.7604 124.104 35.6250 123.968  c
35.4895 123.833 35.4218 123.666 35.4218 123.468  c
35.4218 123.270 35.4895 123.104 35.6250 122.968  c
35.7604 122.833 35.9270 122.765 36.1250 122.765  c
h
43.7031 122.343 m
43.1093 124.000 l
38.0312 124.000 l
38.0312 123.765 l
39.5208 122.401 40.5703 121.286 41.1796 120.421  c
41.7890 119.557 42.0937 118.770 42.0937 118.062  c
42.0937 117.510 41.9270 117.059 41.5937 116.710  c
41.2604 116.362 40.8593 116.187 40.3906 116.187  c
39.9739 116.187 39.5963 116.309 39.2578 116.554  c
38.9192 116.799 38.6718 117.161 38.5156 117.640  c
38.2812 117.640 l
38.3854 116.859 38.6562 116.260 39.0937 115.843  c
39.5312 115.427 40.0781 115.218 40.7343 115.218  c
41.4322 115.218 42.0156 115.442 42.4843 115.890  c
42.9531 116.338 43.1875 116.864 43.1875 117.468  c
43.1875 117.906 43.0833 118.343 42.8750 118.781  c
42.5625 119.468 42.0572 120.192 41.3593 120.953  c
40.3072 122.109 39.6458 122.807 39.3750 123.046  c
41.6250 123.046 l
42.0833 123.046 42.4036 123.028 42.5859 122.992  c
42.7682 122.955 42.9349 122.885 43.0859 122.781  c
43.2369 122.677 43.3645 122.531 43.4687 122.343  c
43.7031 122.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
47.0000 38.8847 m
41.8000 38.8847 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
28.4687 43.7500 m
28.4687 42.7708 28.6171 41.9244 28.9140 41.2109  c
29.2109 40.4974 29.6041 39.9687 30.0937 39.6250  c
30.4791 39.3541 30.8750 39.2187 31.2812 39.2187  c
31.9375 39.2187 32.5260 39.5520 33.0468 40.2187  c
33.7031 41.0520 34.0312 42.1822 34.0312 43.6093  c
34.0312 44.6093 33.8880 45.4583 33.6015 46.1562  c
33.3151 46.8541 32.9479 47.3619 32.5000 47.6796  c
32.0520 47.9974 31.6250 48.1562 31.2187 48.1562  c
30.3958 48.1562 29.7083 47.6718 29.1562 46.7031  c
28.6979 45.8802 28.4687 44.8958 28.4687 43.7500  c
h
29.7187 43.9062 m
29.7187 45.0937 29.8645 46.0625 30.1562 46.8125  c
30.3958 47.4375 30.7552 47.7500 31.2343 47.7500  c
31.4635 47.7500 31.7005 47.6484 31.9453 47.4453  c
32.1901 47.2421 32.3750 46.8958 32.5000 46.4062  c
32.6979 45.6875 32.7968 44.6614 32.7968 43.3281  c
32.7968 42.3489 32.6927 41.5312 32.4843 40.8750  c
32.3385 40.3854 32.1406 40.0416 31.8906 39.8437  c
31.7239 39.7083 31.5156 39.6406 31.2656 39.6406  c
30.9843 39.6406 30.7291 39.7656 30.5000 40.0156  c
30.1979 40.3697 29.9921 40.9244 29.8828 41.6796  c
29.7734 42.4349 29.7187 43.1770 29.7187 43.9062  c
h
36.1250 46.7656 m
36.3229 46.7656 36.4895 46.8359 36.6250 46.9765  c
36.7604 47.1171 36.8281 47.2812 36.8281 47.4687  c
36.8281 47.6666 36.7604 47.8333 36.6250 47.9687  c
36.4895 48.1041 36.3229 48.1718 36.1250 48.1718  c
35.9270 48.1718 35.7604 48.1041 35.6250 47.9687  c
35.4895 47.8333 35.4218 47.6666 35.4218 47.4687  c
35.4218 47.2708 35.4895 47.1041 35.6250 46.9687  c
35.7604 46.8333 35.9270 46.7656 36.1250 46.7656  c
h
43.7968 44.8281 m
43.7968 45.7343 l
42.6406 45.7343 l
42.6406 48.0000 l
41.5937 48.0000 l
41.5937 45.7343 l
37.9531 45.7343 l
37.9531 44.9218 l
41.9531 39.2187 l
42.6406 39.2187 l
42.6406 44.8281 l
43.7968 44.8281 l
h
41.5937 44.8281 m
41.5937 40.5468 l
38.5781 44.8281 l
41.5937 44.8281 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
